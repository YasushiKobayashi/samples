---
description: 
globs: 
alwaysApply: true
---
# プロジェクト概要

このリポジトリは、Zennの記事とサンプルコードを1つのモノレポで管理しています。サンプルコードが常に動作する状態を維持するために継続的にメンテナンスされています。

## 技術スタック

- **パッケージマネージャー**: Bun
- **テストフレームワーク**: Vitest
- **言語**: TypeScript
- **フロントエンドフレームワーク**: React
- **CI/CD**: GitHub Actions
- **コードカバレッジ**: Codecov

## 主要機能

- 記事とサンプルコードを統合したモノレポ構造
- Vitestによる自動テスト
- vitest-axeによるアクセシビリティテスト
- コードカバレッジレポート
- TypeScriptサポート
- Reactコンポーネントのテスト

## プロジェクト構造

### ルートディレクトリ
- `/articles`: Zennの記事を格納
  - 各記事はMarkdownファイルとして管理
  - フロントマターで記事のメタデータを管理
  - 画像は`/articles/images`に配置

- `/src`: サンプルコードの実装を格納
  - 各サンプルは独立したディレクトリとして管理
  - テストファイルは実装と同じディレクトリに配置
  - 共通の設定ファイルはルートに配置

### サンプルプロジェクト
- `/src/jest-same-example-next`: Jestのテストファイル構成例
  - Next.jsプロジェクトでのテストファイル配置例
  - テストと実装を同じディレクトリに配置する構成

- `/src/jest-same-example-rollup`: Rollupを使用したJestの例
  - Rollupでバンドルするプロジェクトのテスト構成例
  - モジュールバンドリング時のテスト設定例

- `/src/react-if-sample`: Reactのif文パターン
  - 条件分岐の実装パターン集
  - コンポーネントの条件付きレンダリング例

- `/src/jest-ts-auto-mock-sample`: モックデータ生成の例
  - TypeScriptの型定義からモックデータを自動生成
  - テストデータの管理方法の例

## 開発環境のセットアップ

```bash
# .node-versionで指定されたNode.jsバージョンをインストール
$ cat .node-version | nodenv install

# Bunで依存関係をインストール
$ bun install
```

## テスト

プロジェクトではVitestを使用してテストを行い、以下の機能を提供しています：
- Happy DOMテスト環境
- Reactテストサポート
- vitest-axeによるアクセシビリティテスト
- Istanbulによるコードカバレッジレポート
- Canvasモックサポート

### テストの書き方
- テストファイルは実装ファイルと同じディレクトリに配置
- テストファイル名は`*.test.ts`または`*.test.tsx`の形式
- コンポーネントテストは`__tests__`ディレクトリに配置可能
- テストカバレッジは80%以上を維持

## CI/CD

- GitHub Actionsによる自動テスト
- Codecovによるカバレッジレポート
- 自動テストワークフローバッジ
- カバレッジバッジ

## 記事一覧

このリポジトリには以下の記事が含まれています：
- Jestのテストファイル構成
- Reactのif文パターン
- モックデータ生成
- Laravel API環境の構築
- Next.js/Serverless FrameworkでのISR実装
- PlaywrightによるE2Eテスト
- テストとStorybookのセットアップ
- axeによるアクセシビリティテスト

## 最近の移行

プロジェクトは最近以下の移行を行いました：
- パッケージマネージャーをYarnからBunへ
- テストフレームワークをJestからVitestへ

これらの移行により以下の改善が実現されました：
- パッケージインストール速度の向上
- 設定の簡素化
- TypeScriptサポートの強化
- テスト実行パフォーマンスの向上

## 開発フロー

### 新規機能追加
1. 新しいサンプルプロジェクトのディレクトリを作成
2. 必要な依存関係をインストール
3. テストを実装
4. コードカバレッジを確認
5. PRを作成

### 記事の追加・更新
1. `/articles`にMarkdownファイルを作成
2. フロントマターを設定
3. サンプルコードとリンク
4. プレビューで確認
5. PRを作成

## トラブルシューティング

### よくある問題
- **Bunのインストールエラー**
  - Node.jsのバージョンを確認
  - `bun install`を再実行

- **テストの実行エラー**
  - `node_modules`を削除して再インストール
  - テスト環境の設定を確認

- **TypeScriptの型エラー**
  - `tsconfig.json`の設定を確認
  - 型定義ファイルの更新